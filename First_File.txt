{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red38\green38\blue38;\red18\green139\blue2;
\red190\green31\blue4;\red213\green213\blue213;\red67\green67\blue67;\red40\green84\blue83;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c20000\c20000\c20000;\cssrgb\c0\c60000\c0;
\cssrgb\c80000\c20000\c0;\cssrgb\c86667\c86667\c86667;\cssrgb\c33333\c33333\c33333;\cssrgb\c20000\c40000\c40000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl620\sa240\partightenfactor0

\f0\fs53\fsmilli26667 \cf2 \expnd0\expndtw0\kerning0
Getting Started 
\fs173\fsmilli86667 1 
\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 This chapter will be about getting started with Git. We will begin by explaining some background on version control tools, then move on to how to get Git run- ning on your system and finally how to get it set up to start working with. At the end of this chapter you should understand why Git is around, why you should use it and you should be all set up to do so. 
\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b\fs32 \cf2 About Version Control 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 What is \'93version control\'94, and why should you care? Version control is a system that records changes to a file or set of files over time so that you can recall spe- cific versions later. For the examples in this book you will use so ware source code as the files being version controlled, though in reality you can do this with nearly any type of file on a computer. 
\fs24 \

\fs26\fsmilli13333 If you are a graphic or web designer and want to keep every version of an image or layout (which you would most certainly want to), a Version Control System (VCS) is a very wise thing to use. It allows you to revert files back to a previous state, revert the entire project back to a previous state, compare changes over time, see who last modified something that might be causing a problem, who introduced an issue and when, and more. Using a VCS also gener- ally means that if you screw things up or lose files, you can easily recover. In addition, you get all this for very little overhead. 
\fs24 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\b\fs29\fsmilli14667 \cf2 Local Version Control Systems 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 Many people\'92s version-control method of choice is to copy files into another di- rectory (perhaps a time-stamped directory, if they\'92re clever). This approach is very common because it is so simple, but it is also incredibly error prone. It is easy to forget which directory you\'92re in and accidentally write to the wrong file or copy over files you don\'92t mean to. 
\fs24 \
27 \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl260\sa240\partightenfactor0

\fs21\fsmilli10667 \cf2 CHAPTER 1: Getting Started 
\fs24 \
\pard\intbl\itap1\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 To deal with this issue, programmers long ago developed local VCSs that had a simple database that kept all the changes to files under revision control. 
\fs24 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl280\sa240\partightenfactor0

\b \cf2 FIGURE 1-1 
\b0 \
\pard\intbl\itap1\pardeftab720\sl260\sa240\partightenfactor0

\i\fs21\fsmilli10667 \cf2 Local version control. 
\i0\fs24 \
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf2 {{\NeXTGraphic page28image3806016.png \width6302 \height5374 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf2  \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl280\sa240\partightenfactor0
\cf2 28 \
\pard\intbl\itap1\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 One of the more popular VCS tools was a system called RCS, which is still distributed with many computers today. Even the popular Mac OS X operating system includes the rcs command when you install the Developer Tools. RCS works by keeping patch sets (that is, the di erences between files) in a special format on disk; it can then re-create what any file looked like at any point in time by adding up all the patches. 
\fs24 \
\pard\intbl\itap1\pardeftab720\sl340\sa240\partightenfactor0

\b\fs29\fsmilli14667 \cf2 Centralized Version Control Systems 
\b0\fs24 \
\pard\intbl\itap1\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 The next major issue that people encounter is that they need to collaborate with developers on other systems. To deal with this problem, Centralized Ver- sion Control Systems (CVCSs) were developed. These systems, such as CVS, Subversion, and Perforce, have a single server that contains all the versioned 
\fs24 \cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 files, and a number of clients that check out files from that central place. For many years, this has been the standard for version control. 
\fs24 \
\pard\intbl\itap1\pardeftab720\sl260\sa240\partightenfactor0

\fs21\fsmilli10667 \cf2 About Version Control 
\fs24 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl280\sa240\partightenfactor0

\b \cf2 FIGURE 1-2 
\b0 \
\pard\intbl\itap1\pardeftab720\sl260\sa240\partightenfactor0

\i\fs21\fsmilli10667 \cf2 Centralized version control. 
\i0\fs24 \
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf2 {{\NeXTGraphic page29image1832736.png \width6295 \height4382 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf2  \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 This setup o ers many advantages, especially over local VCSs. For example, everyone knows to a certain degree what everyone else on the project is doing. Administrators have fine-grained control over who can do what; and it\'92s far eas- ier to administer a CVCS than it is to deal with local databases on every client. 
\fs24 \

\fs26\fsmilli13333 However, this setup also has some serious downsides. The most obvious is the single point of failure that the centralized server represents. If that server goes down for an hour, then during that hour nobody can collaborate at all or save versioned changes to anything they\'92re working on. If the hard disk the cen- tral database is on becomes corrupted, and proper backups haven\'92t been kept, you lose absolutely everything \'96 the entire history of the project except whatev- er single snapshots people happen to have on their local machines. Local VCS systems su er from this same problem \'96 whenever you have the entire history of the project in a single place, you risk losing everything. 
\fs24 \
\pard\intbl\itap1\pardeftab720\sl340\sa240\partightenfactor0

\b\fs29\fsmilli14667 \cf2 Distributed Version Control Systems 
\b0\fs24 \
\pard\intbl\itap1\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 This is where Distributed Version Control Systems (DVCSs) step in. In a DVCS (such as Git, Mercurial, Bazaar or Darcs), clients don\'92t just check out the latest 
\fs24 \
29 \cell \lastrow\row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl260\sa240\partightenfactor0

\fs21\fsmilli10667 \cf2 CHAPTER 1: Getting Started 
\fs24 \
\pard\intbl\itap1\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 snapshot of the files: they fully mirror the repository. Thus if any server dies, and these systems were collaborating via it, any of the client repositories can be copied back up to the server to restore it. Every checkout is really a full back- up of all the data. 
\fs24 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl280\sa240\partightenfactor0

\b \cf2 FIGURE 1-3 
\b0 \
\pard\intbl\itap1\pardeftab720\sl260\sa240\partightenfactor0

\i\fs21\fsmilli10667 \cf2 Distributed version control. 
\i0\fs24 \
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf2 {{\NeXTGraphic page30image1830720.png \width6287 \height7538 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf2  \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl280\sa240\partightenfactor0
\cf2 30 \
\pard\intbl\itap1\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 Furthermore, many of these systems deal pretty well with having several re- mote repositories they can work with, so you can collaborate with di erent groups of people in di erent ways simultaneously within the same project. This 
\fs24 \cell \lastrow\row
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 allows you to set up several types of workflows that aren\'92t possible in central- ized systems, such as hierarchical models. 
\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b\fs32 \cf2 A Short History of Git 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 As with many great things in life, Git began with a bit of creative destruction and fiery controversy. 
\fs24 \

\fs26\fsmilli13333 The Linux kernel is an open source so ware project of fairly large scope. For most of the lifetime of the Linux kernel maintenance (1991\'962002), changes to the so ware were passed around as patches and archived files. In 2002, the Li- nux kernel project began using a proprietary DVCS called BitKeeper. 
\fs24 \

\fs26\fsmilli13333 In 2005, the relationship between the community that developed the Linux kernel and the commercial company that developed BitKeeper broke down, and the tool\'92s free-of-charge status was revoked. This prompted the Linux de- velopment community (and in particular Linus Torvalds, the creator of Linux) to develop their own tool based on some of the lessons they learned while using BitKeeper. Some of the goals of the new system were as follows: 
\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\sa266\partightenfactor0
\ls1\ilvl0
\fs26\fsmilli13333 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Speed \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Simple design \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Strong support for non-linear development (thousands of parallel branches) \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Fully distributed \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Able to handle large projects like the Linux kernel e iciently (speed and data size) \uc0\u8232 Since its birth in 2005, Git has evolved and matured to be easy to use and yet retain these initial qualities. It\'92s incredibly fast, it\'92s very e icient with large projects, and it has an incredible branching system for non-linear development (See 
\b \cf3 Chapter 3
\b0 \cf2 ). \uc0\u8232 
\b\fs32 Git Basics 
\b0\fs26\fsmilli13333 \uc0\u8232 So, what is Git in a nutshell? This is an important section to absorb, because if you understand what Git is and the fundamentals of how it works, then using Git e ectively will probably be much easier for you. As you learn Git, try to clear your mind of the things you may know about other VCSs, such as Subversion and Perforce; doing so will help you avoid subtle confusion when using the tool. Git stores and thinks about information much di erently than these other sys- tems, even though the user interface is fairly similar, and understanding those di erences will help prevent you from becoming confused while using it. \u8232 \
\pard\pardeftab720\sl260\sa240\partightenfactor0

\fs21\fsmilli10667 \cf2 A Short History of Git 
\fs24 \
31 \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl260\sa240\partightenfactor0

\fs21\fsmilli10667 \cf2 CHAPTER 1: Getting Started 
\fs24 \
\pard\intbl\itap1\pardeftab720\sl340\sa240\partightenfactor0

\b\fs29\fsmilli14667 \cf2 Snapshots, Not Di erences 
\b0\fs24 \
\pard\intbl\itap1\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 The major di erence between Git and any other VCS (Subversion and friends included) is the way Git thinks about its data. Conceptually, most other systems store information as a list of file-based changes. These systems (CVS, Subver- sion, Perforce, Bazaar, and so on) think of the information they keep as a set of files and the changes made to each file over time. 
\fs24 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl280\sa240\partightenfactor0

\b \cf2 FIGURE 1-4 
\b0 \
\pard\intbl\itap1\pardeftab720\sl260\sa240\partightenfactor0

\i\fs21\fsmilli10667 \cf2 Storing data as changes to a base version of each le. 
\i0\fs24 \
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf2 {{\NeXTGraphic page32image1770464.png \width6302 \height2440 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf2  \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 Git doesn\'92t think of or store its data this way. Instead, Git thinks of its data more like a set of snapshots of a miniature filesystem. Every time you commit, or save the state of your project in Git, it basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot. To be e icient, if files have not changed, Git doesn\'92t store the file again, just a link to the previous identical file it has already stored. Git thinks about its data more like a 
\b stream of snapshots
\b0 . 
\fs24 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl280\sa240\partightenfactor0

\b \cf2 FIGURE 1-5 
\b0 \
\pard\intbl\itap1\pardeftab720\sl260\sa240\partightenfactor0

\i\fs21\fsmilli10667 \cf2 Storing data as snapshots of the project over time. 
\i0\fs24 \
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf2 {{\NeXTGraphic page32image1775168.png \width6295 \height2400 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf2  \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl280\sa240\partightenfactor0
\cf2 32 \cell \lastrow\row
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 This is an important distinction between Git and nearly all other VCSs. It makes Git reconsider almost every aspect of version control that most other systems copied from the previous generation. This makes Git more like a mini filesystem with some incredibly powerful tools built on top of it, rather than simply a VCS. We\'92ll explore some of the benefits you gain by thinking of your data this way when we cover Git branching in 
\b \cf3 Chapter 3
\b0 \cf2 . 
\fs24 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\b\fs29\fsmilli14667 \cf2 Nearly Every Operation Is Local 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 Most operations in Git only need local files and resources to operate \'96 generally no information is needed from another computer on your network. If you\'92re used to a CVCS where most operations have that network latency overhead, this aspect of Git will make you think that the gods of speed have blessed Git with unworldly powers. Because you have the entire history of the project right there on your local disk, most operations seem almost instantaneous. 
\fs24 \

\fs26\fsmilli13333 For example, to browse the history of the project, Git doesn\'92t need to go out to the server to get the history and display it for you \'96 it simply reads it directly from your local database. This means you see the project history almost in- stantly. If you want to see the changes introduced between the current version of a file and the file a month ago, Git can look up the file a month ago and do a local di erence calculation, instead of having to either ask a remote server to do it or pull an older version of the file from the remote server to do it locally. 
\fs24 \

\fs26\fsmilli13333 This also means that there is very little you can\'92t do if you\'92re o line or o VPN. If you get on an airplane or a train and want to do a little work, you can commit happily until you get to a network connection to upload. If you go home and can\'92t get your VPN client working properly, you can still work. In many oth- er systems, doing so is either impossible or painful. In Perforce, for example, you can\'92t do much when you aren\'92t connected to the server; and in Subversion and CVS, you can edit files, but you can\'92t commit changes to your database (be- cause your database is o line). This may not seem like a huge deal, but you may be surprised what a big di erence it can make. 
\fs24 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\b\fs29\fsmilli14667 \cf2 Git Has Integrity 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 Everything in Git is check-summed before it is stored and is then referred to by that checksum. This means it\'92s impossible to change the contents of any file or directory without Git knowing about it. This functionality is built into Git at the lowest levels and is integral to its philosophy. You can\'92t lose information in transit or get file corruption without Git being able to detect it. 
\fs24 \

\fs26\fsmilli13333 The mechanism that Git uses for this checksumming is called a SHA-1 hash. This is a 40-character string composed of hexadecimal characters (0\'969 and a\'96f) 
\fs24 \
33 \
\pard\pardeftab720\sl260\sa240\partightenfactor0

\fs21\fsmilli10667 \cf2 Git Basics 
\fs24 \

\fs21\fsmilli10667 CHAPTER 1: Getting Started 
\fs24 \
34 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 and calculated based on the contents of a file or directory structure in Git. A SHA-1 hash looks something like this: 
\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2    24b9da6552252987aa493b52f8696cd6d3b00373\
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 You will see these hash values all over the place in Git because it uses them so much. In fact, Git stores everything in its database not by file name but by the hash value of its contents. 
\fs24 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\b\fs29\fsmilli14667 \cf2 Git Generally Only Adds Data 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 When you do actions in Git, nearly all of them only add data to the Git database. It is hard to get the system to do anything that is not undoable or to make it erase data in any way. As in any VCS, you can lose or mess up changes you ha- ven\'92t committed yet; but a er you commit a snapshot into Git, it is very di icult to lose, especially if you regularly push your database to another repository. 
\fs24 \

\fs26\fsmilli13333 This makes using Git a joy because we know we can experiment without the danger of severely screwing things up. For a more in-depth look at how Git stores its data and how you can recover data that seems lost, see 
\b \cf3 \'93Undoing Things\'94
\b0 \cf2 . 
\fs24 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\b\fs29\fsmilli14667 \cf2 The Three States 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 Now, pay attention. This is the main thing to remember about Git if you want the rest of your learning process to go smoothly. Git has three main states that your files can reside in: committed, modified, and staged. Committed means that the data is safely stored in your local database. Modified means that you have changed the file but have not committed it to your database yet. Staged means that you have marked a modified file in its current version to go into your next commit snapshot. 
\fs24 \

\fs26\fsmilli13333 This leads us to the three main sections of a Git project: the Git directory, the working directory, and the staging area. 
\fs24 \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl260\sa240\partightenfactor0

\fs21\fsmilli10667 \cf2 Git Basics 
\fs24 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl280\sa240\partightenfactor0

\b \cf2 FIGURE 1-6 
\b0 \
\pard\intbl\itap1\pardeftab720\sl260\sa240\partightenfactor0

\i\fs21\fsmilli10667 \cf2 Working directory, staging area, and Git directory. 
\i0\fs24 \
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf2 {{\NeXTGraphic page35image3804672.png \width6302 \height3470 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf2  \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 The Git directory is where Git stores the metadata and object database for your project. This is the most important part of Git, and it is what is copied when you clone a repository from another computer. 
\fs24 \

\fs26\fsmilli13333 The working directory is a single checkout of one version of the project. These files are pulled out of the compressed database in the Git directory and placed on disk for you to use or modify. 
\fs24 \

\fs26\fsmilli13333 The staging area is a file, generally contained in your Git directory, that stores information about what will go into your next commit. It\'92s sometimes re- ferred to as the \'93index\'94, but it\'92s also common to refer to it as the staging area. 
\fs24 \

\fs26\fsmilli13333 The basic Git workflow goes something like this: 
\fs24 \
\pard\intbl\itap1\tx220\tx720\pardeftab720\li720\fi-720\sl300\sa266\partightenfactor0
\ls2\ilvl0
\fs26\fsmilli13333 \cf2 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
You modify files in your working directory. \uc0\u8232 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
You stage the files, adding snapshots of them to your staging area. \uc0\u8232 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory. \uc0\u8232 \
\pard\intbl\itap1\pardeftab720\sl300\sa240\partightenfactor0
\cf2 If a particular version of a file is in the Git directory, it\'92s considered commit- ted. If it\'92s modified but has been added to the staging area, it is staged. And if it was changed since it was checked out but has not been staged, it is modified. In 
\b \cf3 Chapter 2
\b0 \cf2 , you\'92ll learn more about these states and how you can either take advantage of them or skip the staged part entirely. 
\fs24 \
35 \cell \lastrow\row
\pard\pardeftab720\sl260\sa240\partightenfactor0

\fs21\fsmilli10667 \cf2 CHAPTER 1: Getting Started 
\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b\fs32 \cf2 The Command Line 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 There are a lot of di erent ways to use Git. There are the original command line tools, and there are many graphical user interfaces of varying capabilities. For this book, we will be using Git on the command line. For one, the command line is the only place you can run 
\b all 
\b0 Git commands \'96 most of the GUIs only imple- ment some subset of Git functionality for simplicity. If you know how to run the command line version, you can probably also figure out how to run the GUI ver- sion, while the opposite is not necessarily true. Also, while your choice of graph- ical client is a matter of personal taste, 
\i all 
\i0 users will have the command-line tools installed and available. 
\fs24 \

\fs26\fsmilli13333 So we will expect you to know how to open Terminal in Mac or Command Prompt or Powershell in Windows. If you don\'92t know what we\'92re talking about here, you may need to stop and research that quickly so that you can follow the rest of the examples and descriptions in this book. 
\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b\fs32 \cf2 Installing Git 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 Before you start using Git, you have to make it available on your computer. Even if it\'92s already installed, it\'92s probably a good idea to update to the latest version. You can either install it as a package or via another installer, or down- load the source code and compile it yourself. 
\fs24 \
\pard\pardeftab720\sl260\sa240\partightenfactor0

\fs21\fsmilli10667 \cf2 This book was written using Git version 
\b 2.0.0
\b0 . Though most of the com- mands we use should work even in ancient versions of Git, some of them might not or might act slightly differently if you\'92re using an older ver- sion. Since Git is quite excellent at preserving backwards compatibility, any version after 2.0 should work just fine. 
\fs24 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\b\fs29\fsmilli14667 \cf2 Installing on Linux 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 If you want to install Git on Linux via a binary installer, you can generally do so through the basic package-management tool that comes with your distribu- tion. If you\'92re on Fedora for example, you can use yum: 
\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2    $ yum install git\
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 If you\'92re on a Debian-based distribution like Ubuntu, try apt-get: 
\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2    $ apt-get install git\
\pard\pardeftab720\sl280\partightenfactor0
\cf2 {{\NeXTGraphic page36image3750720.png \width3882 \height14 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\sl280\partightenfactor0
\cf2  {{\NeXTGraphic page36image3750720.png \width3882 \height14 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf2 36 \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 For more options, there are instructions for installing on several di erent Unix flavors on the Git website, at 
\i \cf3 http://git-scm.com/download/linux
\i0 \cf2 . 
\fs24 \
\pard\intbl\itap1\pardeftab720\sl340\sa240\partightenfactor0

\b\fs29\fsmilli14667 \cf2 Installing on Mac 
\b0\fs24 \
\pard\intbl\itap1\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 There are several ways to install Git on a Mac. The easiest is probably to install the Xcode Command Line Tools. On Mavericks (10.9) or above you can do this simply by trying to run 
\i git 
\i0 from the Terminal the very first time. If you don\'92t have it installed already, it will prompt you to install it. 
\fs24 \

\fs26\fsmilli13333 If you want a more up to date version, you can also install it via a binary in- staller. An OSX Git installer is maintained and available for download at the Git website, at 
\i \cf3 http://git-scm.com/download/mac
\i0 \cf2 . 
\fs24 \
\pard\intbl\itap1\pardeftab720\sl260\sa240\partightenfactor0

\fs21\fsmilli10667 \cf2 Installing Git 
\fs24 \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrnil \clbrdrb\brdrs\brdrw10\brdrcf2 \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl280\sa240\partightenfactor0

\b \cf2 FIGURE 1-7 
\b0 \
\pard\intbl\itap1\pardeftab720\sl260\sa240\partightenfactor0

\i\fs21\fsmilli10667 \cf2 Git OS X Installer. 
\i0\fs24 \
\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf2 {{\NeXTGraphic page37image1794432.png \width6295 \height4563 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\intbl\itap1\pardeftab720\sl280\partightenfactor0
\cf2  \cell \row

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth15640\clftsWidth3 \clbrdrt\brdrs\brdrw10\brdrcf2 \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 You can also install it as part of the GitHub for Mac install. Their GUI Git tool has an option to install command line tools as well. You can download that tool from the GitHub for Mac website, at 
\i \cf3 http://mac.github.com
\i0 \cf2 . 
\fs24 \
37 \cell \lastrow\row
\pard\pardeftab720\sl260\sa240\partightenfactor0

\fs21\fsmilli10667 \cf2 CHAPTER 1: Getting Started 
\fs24 \
38 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\b\fs29\fsmilli14667 \cf2 Installing on Windows 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 There are also a few ways to install Git on Windows. The most o icial build is available for download on the Git website. Just go to 
\i \cf3 http://git-scm.com/down- load/win 
\i0 \cf2 and the download will start automatically. Note that this is a project called Git for Windows (also called msysGit), which is separate from Git itself; for more information on it, go to 
\i \cf3 http://msysgit.github.io/
\i0 \cf2 . 
\fs24 \

\fs26\fsmilli13333 Another easy way to get Git installed is by installing GitHub for Windows. The installer includes a command line version of Git as well as the GUI. It also works well with Powershell, and sets up solid credential caching and sane CRLF set- tings. We\'92ll learn more about those things a little later, but su ice it to say they\'92re things you want. You can download this from the GitHub for Windows website, at 
\i \cf3 http://windows.github.com
\i0 \cf2 . 
\fs24 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\b\fs29\fsmilli14667 \cf2 Installing from Source 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 Some people may instead find it useful to install Git from source, because you\'92ll get the most recent version. The binary installers tend to be a bit behind, though as Git has matured in recent years, this has made less of a di erence. 
\fs24 \

\fs26\fsmilli13333 If you do want to install Git from source, you need to have the following li- braries that Git depends on: curl, zlib, openssl, expat, and libiconv. For exam- ple, if you\'92re on a system that has yum (such as Fedora) or apt-get (such as a Debian based system), you can use one of these commands to install all of the dependencies: 
\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2    $ yum install curl-devel expat-devel gettext-devel \\\
     openssl-devel zlib-devel\
   $ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\\
     libz-dev libssl-dev\
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 When you have all the necessary dependencies, you can go ahead and grab the latest tagged release tarball from several places. You can get it via the Ker- nel.org site, at 
\i \cf3 https://www.kernel.org/pub/so ware/scm/git
\i0 \cf2 , or the mirror on the GitHub web site, at 
\i \cf3 https://github.com/git/git/releases
\i0 \cf2 . It\'92s generally a lit- tle clearer what the latest version is on the GitHub page, but the kernel.org page also has release signatures if you want to verify your download. 
\fs24 \

\fs26\fsmilli13333 Then, compile and install: 
\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2    $ tar -zxf git-1.9.1.tar.gz\
   $ cd git-1.9.1\
   $ make configure\
   $ ./configure --prefix=/usr\
   $ make all doc info\
   $ sudo make install install-doc install-html install-info\
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 A er this is done, you can also get Git via Git itself for updates: 
\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2    $ git clone git://git.kernel.org/pub/scm/git/git.git\
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b\fs32 \cf2 First-Time Git Setup 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 Now that you have Git on your system, you\'92ll want to do a few things to custom- ize your Git environment. You should have to do these things only once on any given computer; they\'92ll stick around between upgrades. You can also change them at any time by running through the commands again. 
\fs24 \

\fs26\fsmilli13333 Git comes with a tool called git config that lets you get and set configura- tion variables that control all aspects of how Git looks and operates. These vari- ables can be stored in three di erent places: 
\fs24 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl300\sa266\partightenfactor0
\ls3\ilvl0
\fs26\fsmilli13333 \cf2 \kerning1\expnd0\expndtw0 {\listtext	1.	}\expnd0\expndtw0\kerning0
/etc/gitconfig file: Contains values for every user on the system and all their repositories. If you pass the option --system to git config, it reads and writes from this file specifically. \uc0\u8232 \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2.	}\expnd0\expndtw0\kerning0
~/.gitconfig or ~/.config/git/config file: Specific to your user. You can make Git read and write to this file specifically by passing the -- global option. \uc0\u8232 \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3.	}\expnd0\expndtw0\kerning0
config file in the Git directory (that is, .git/config) of whatever repos- itory you\'92re currently using: Specific to that single repository. \uc0\u8232 \
\pard\pardeftab720\sl300\sa240\partightenfactor0
\cf2 Each level overrides values in the previous level, so values in .git/config trump those in /etc/gitconfig. 
\fs24 \

\fs26\fsmilli13333 On Windows systems, Git looks for the .gitconfig file in the $HOME directo- ry (C:\\Users\\$USER for most people). It also still looks for /etc/gitconfig, although it\'92s relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer. 
\fs24 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\b\fs29\fsmilli14667 \cf2 Your Identity 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 The first thing you should do when you install Git is to set your user name and e-mail address. This is important because every Git commit uses this informa- tion, and it\'92s immutably baked into the commits you start creating: 
\fs24 \
\pard\pardeftab720\sl260\sa240\partightenfactor0

\fs21\fsmilli10667 \cf2 First-Time Git Setup 
\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2 {{\NeXTGraphic page39image1676864.png \width6060 \height740 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\sl280\partightenfactor0
\cf2 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b \cf4 $ 
\b0 \cf2 git config --global user.name \cf5 "John Doe"\uc0\u8232 
\b \cf4 $ 
\b0 \cf2 git config --global user.email johndoe@example.com \
39 \
\pard\pardeftab720\sl260\sa240\partightenfactor0

\fs21\fsmilli10667 \cf2 CHAPTER 1: Getting Started 
\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 Again, you need to do this only once if you pass the --global option, be- cause then Git will always use that information for anything you do on that sys- tem. If you want to override this with a di erent name or e-mail address for specific projects, you can run the command without the --global option when you\'92re in that project. 
\fs24 \

\fs26\fsmilli13333 Many of the GUI tools will help you do this when you first run them. 
\fs24 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\b\fs29\fsmilli14667 \cf2 Your Editor 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 Now that your identity is set up, you can configure the default text editor that will be used when Git needs you to type in a message. If not configured, Git uses your system\'92s default editor, which is generally Vim. If you want to use a di er- ent text editor, such as Emacs, you can do the following: 
\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b \cf4 \cb6 $ 
\b0 \cf2 git config --global core.editor emacs \cb1 \
\pard\pardeftab720\sl260\sa240\partightenfactor0

\fs21\fsmilli10667 \cf2 Vim and Emacs are popular text editors often used by developers on Unix based systems like Linux and Mac. If you are not familiar with either of these editors or are on a Windows system, you may need to search for in- structions for how to set up your favorite editor with Git. If you don\'92t set an editor like this and you don\'92t know what Vim or Emacs are, you will likely get into a really confusing state when they are launched. 
\fs24 \
\pard\pardeftab720\sl340\sa240\partightenfactor0

\b\fs29\fsmilli14667 \cf2 Checking Your Settings 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 If you want to check your settings, you can use the git config --list com- mand to list all the settings Git can find at that point: 
\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2 {{\NeXTGraphic page36image3750720.png \width3882 \height14 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\pardeftab720\sl280\partightenfactor0
\cf2  {{\NeXTGraphic page36image3750720.png \width3882 \height14 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b \cf4 \cb6 $ 
\b0 \cf2 git config --list \cf7 user.name=John Doe user.email=johndoe@example.com color.status=auto color.branch=auto color.interactive=auto color.diff=auto \cf2 \cb1 \
\pard\pardeftab720\sl280\sa240\partightenfactor0
\cf7 \cb6 ... \cf2 \cb1 \
40 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 You may see keys more than once, because Git reads the same key from dif- ferent files (/etc/gitconfig and ~/.gitconfig, for example). In this case, Git uses the last value for each unique key it sees. 
\fs24 \

\fs26\fsmilli13333 You can also check what Git thinks a specific key\'92s value is by typing git config <key>: 
\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b\fs32 \cf2 Getting Help 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 If you ever need help while using Git, there are three ways to get the manual page (manpage) help for any of the Git commands: 
\fs24 \

\fs26\fsmilli13333 For example, you can get the manpage help for the config command by run- ning 
\fs24 \
\pard\pardeftab720\sl280\sa240\partightenfactor0

\b \cf4 \cb6 $ 
\b0 \cf2 git \cf8 help \cf2 config \cb1 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 These commands are nice because you can access them anywhere, even o - line. If the manpages and this book aren\'92t enough and you need in-person help, you can try the #git or #github channel on the Freenode IRC server (irc.free- node.net). These channels are regularly filled with hundreds of people who are all very knowledgeable about Git and are o en willing to help. 
\fs24 \
\pard\pardeftab720\sl360\sa240\partightenfactor0

\b\fs32 \cf2 Summary 
\b0\fs24 \
\pard\pardeftab720\sl300\sa240\partightenfactor0

\fs26\fsmilli13333 \cf2 You should have a basic understanding of what Git is and how it\'92s di erent from the centralized version control system you may have previously been using. You should also now have a working version of Git on your system that\'92s set up with your personal identity. It\'92s now time to learn some Git basics. 
\fs24 \
}